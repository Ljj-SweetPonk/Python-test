import numpy as np
import matplotlib.pyplot as plt
from torch import nn,optim
from torch.autograd import Variable
import torch
from torchvision import datasets,transforms
from torch.utils.data import DataLoader
#导入数据集
train_dataset=datasets.MNIST(root="./",
                     train=True,
                     transform=transforms.ToTensor(),
                     download=False)
test_dataset=datasets.MNIST(root="./",
                     train=False,
                     transform=transforms.ToTensor(),
                     download=False)
#x=train_dataset.test_data
#y=train_dataset.train_labels
#print(x.shape)
#print(y.shape)
#print(train_dataset.train_data.shape)
#plt.imshow(train_dataset.train_data[2],cmap='gray')
#plt.title('%d'%train_dataset.train_labels[2])
#plt.show()
#分批
batch_size=50
input_size=784
hidden_size=500
num_classes=10
train_loader=DataLoader(dataset=train_dataset,
                        batch_size=batch_size,
                        shuffle=True)
test_loader=DataLoader(dataset=test_dataset,
                        batch_size=batch_size,
                        shuffle=True)
#观察数据维度
for i ,data in enumerate(train_loader):
    inputs,labels=data
    #print(data.index)
    print(inputs.shape) #torch.Size([64,1,28,28])
    print(labels.shape) #torch.Size([64])    
    break
#################################################################################
#实现模型
class SingleNet(nn.Module):
    def __init__(self,input_size,hidden_size,num_classes):
        super(SingleNet,self).__init__()
        self.fc1=nn.Linear(input_size,hidden_size)
        self.relu=nn.ReLU()
        self.fc2=nn.Linear(hidden_size,num_classes)
        
    def forward(self,x):
        out=self.fc1(x)
        out=self.relu(out)
        out=self.fc2(out)
        
        return out
#################################################################################    
model=SingleNet(input_size,hidden_size,num_classes)
loss=nn.CrossEntropyLoss()
optimizer=optim.SGD(model.parameters(),lr=0.01)
#################################################################################
#训练模型
def train():
    for i,data in enumerate(train_loader):
        inputs,labels=data
        inputs=Variable(inputs.view(-1,28*28))
        labels=Variable(labels)#把数据变成张量类型
        optimizer.zero_grad()
        output=model(inputs)
        loss1=loss(output,labels)
        loss1.backward()#计算损失函数
        optimizer.step()
def test():
    correct=0
    total=0
    for i,data in enumerate(test_loader):
        inputs,labels=data
        inputs=Variable(inputs.view(-1,28*28))
        outputs=model(inputs)
        _,predicted=torch.max(outputs.data,1)
        total+=labels.size(0)
        correct+=(predicted==labels).sum()
    print("准确率:%d %%"%(torch.floor_divide(100*correct, total)))
##train()
##test()
##train()
##test()
for i in range(10):
    train()
    test()

